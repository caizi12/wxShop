<?xml version="1.0" encoding="UTF-8"?>
 
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd"
       default-autowire="byName">
       
     <!-- 去除Controller注解类，由springMVC负责初始化这些control注解类 -->
     <context:component-scan base-package="cn.myshop"> 
     	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/> 
	</context:component-scan>
	  
     <!-- 加载数据连接信息 -->
     <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/jdbc.properties</value>
			</list>
		</property>
	</bean> 
	
	<!-- 配置数据源，使用c3p0连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
	    <property name="driverClass" value="${jdbc.driver}" />
	    <property name="jdbcUrl" value="${jdbc.url}" />
	    <property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialPoolSize" value="${pool.initialPoolSize}" />
		<property name="minPoolSize" value="${pool.minPoolSize}" />
		<property name="maxPoolSize" value="${pool.maxPoolSize}" />
		<property name="maxIdleTime" value="${pool.maxIdleTime}" />
		<property name="acquireIncrement" value="${pool.acquireIncrement}" />
		<property name="checkoutTimeout" value="${pool.checkoutTimeout}" />
		<property name="maxIdleTimeExcessConnections" value="${pool.maxIdleTimeExcessConnections}" />
		<property name="acquireRetryAttempts" value="${pool.acquireRetryAttempts}" />
		<property name="idleConnectionTestPeriod" value="${pool.idleConnectionTestPeriod}" />
		<property name="autoCommitOnClose" value="${pool.autoCommitOnClose}" />
	</bean>
	 
	<!-- dao管理采用ibatis -->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocations">
		  <value>classpath*:/config/ibatis/*sqlmap-config.xml</value>
		</property>
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property  name="dataSource" ref="dataSource"/>
	</bean>
	
	<!--定义SqlMapClientTemplate bean实现自定义ibatisTemplate  -->
	<bean id="ibatisTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
		<property name="dataSource" ref="dataSource"/>
		<property name="sqlMapClient" ref="sqlMapClient"/>
	</bean>

	<bean id="sqlExecutor" class="cn.myshop.platform.common.base.LimitSqlExecutor">
    </bean>
	
	<bean id="baseDaoTemplate"  class="cn.myshop.platform.common.base.BaseDaoTemplate" init-method="initialize">
		<property name="ibatisTemplate" ref="ibatisTemplate"></property>
		<property name="jdbcTemplate"   ref="jdbcTemplate"></property>
        <property name="sqlExecutor">
            <ref bean="sqlExecutor" />
        </property> 
    </bean> 

	<!--声明式事务控制  -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 指定事务切入点  凡是实现了以com.myshop打头的包及其子包里以Service结尾接口中的所有方法需要由事务进行控制-->
	<aop:config>
		<aop:pointcut id="serviceOperation" expression="execution(* cn.myshop..*Service.*(..))" />
		<aop:advisor pointcut-ref="serviceOperation" advice-ref="txAdvice" />
	</aop:config>
	 
 	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		    <!-- 读取数据方法，一般采用只读事务-->
			<tx:method name="get*" read-only="true"/>
			<tx:method name="query*" read-only="true"/>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="load*" read-only="true"/>
			
			<!--以下方法，如save，update，insert等对数据库进行写入操作的方法，当产生Exception时进行回滚 -->
			<tx:method name="insert*"   />
			<tx:method name="update*"  />
			<tx:method name="save*"  />
			<tx:method name="add*"  />
			<tx:method name="create*"  />
			<tx:method name="del*"  />
			<tx:method name="remove*"  />
			<tx:method name="batch*"  />
			<!-- <tx:method name="*" rollback-for="Exception"/> -->
		</tx:attributes>
	</tx:advice>

</beans>
